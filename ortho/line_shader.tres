[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

render_mode cull_disabled, skip_vertex_transform, unshaded;

uniform vec3 local_direction;
uniform vec4 color: hint_color;
uniform vec4 outline_color: hint_color = vec4(vec3(0.0), 1.0);
uniform float line_width: hint_range(0.1, 1.0) = 0.5;
uniform float pixel_size = 1.0;
uniform float fuzz_amount = 0.0;
varying float right_boundary;
varying float right_boundary2;
varying float left_boundary;
varying float left_boundary2;

float random (float x) {
    return fract(sin(x)*
        493349.5453123);
}

float lerp(float a, float b, float w) {
	return a + w*(b-a);
}

void fragment() {
	float max_x_dist = right_boundary - left_boundary;
	float r = random(SCREEN_UV.y);
	float acceptable_x1 = lerp(left_boundary, left_boundary2, r);
	float acceptable_x2 = lerp(right_boundary, right_boundary2, r);
	
	float pct = step(FRAGCOORD.x, acceptable_x2) - step(FRAGCOORD.x, acceptable_x1);
	float shifted_pct = step(FRAGCOORD.x - 1.0, acceptable_x2) - step(FRAGCOORD.x + 1.0, acceptable_x1);
	shifted_pct -= pct;
	ALBEDO = vec3(shifted_pct * outline_color.rgb + pct * color.rgb);
	ALPHA = pct + shifted_pct;
	
	ALPHA_SCISSOR = 1.0;
}

void vertex() {
	mat4 projection = PROJECTION_MATRIX * MODELVIEW_MATRIX;
	
	vec4 center_clip_space = projection * vec4(0.0, 0.0, 0.0, 1.0);
	vec2 center_ndc = center_clip_space.xy / center_clip_space.w;
	
	vec4 vert_in_clip_space = projection * vec4(VERTEX, 1.0);
	vec2 vert_in_ndc_space = vert_in_clip_space.xy / vert_in_clip_space.w;
	
	vec4 next_point = vec4(VERTEX + (local_direction*2.0), 1.0);
	vec4 next_point_clip_space = projection * next_point;
	vec2 next_point_ndc_space = next_point_clip_space.xy / next_point_clip_space.w;

	float line_length = length(next_point_ndc_space - vert_in_ndc_space);
	vec2 line_direction_onscreen = normalize(next_point_ndc_space - vert_in_ndc_space);
	vec2 normal = vec2(-line_direction_onscreen.y, line_direction_onscreen.x);
	float orientation = 1.0;
	
	if (VERTEX.x < 0.0 ) {
		orientation *= -1.0;
	}
	
	// deal with viewport scaling and sizing
	float camera_scale_x = PROJECTION_MATRIX[0].x;
	float camera_scale_y = PROJECTION_MATRIX[1].y;
	float aspect = camera_scale_x * camera_scale_y;
	normal.x /= camera_scale_y;
	normal.y /= camera_scale_x;
	vec2 scaled_line_width = vec2(line_width) * (aspect);
	
	vec3 offset = vec3(normal * scaled_line_width * orientation, 0.0);
	VERTEX = vec3(vert_in_ndc_space, (vert_in_clip_space.z / vert_in_clip_space.w) + 0.05) + offset;
	
	// set up some bounds for fuzzing
	vec2 center_screen_point = (((center_clip_space.xy + 1.0)) / 2.0);

	vec2 screen_normal = normal * scaled_line_width;
	if(screen_normal.x < 0.0)
		screen_normal *= -1.0;

	vec2 right_bound_intersect = center_screen_point + (screen_normal * (0.3 + 0.1 * fuzz_amount));
	vec2 left_bound_intersect = center_screen_point - (screen_normal * (0.3 + 0.1 * fuzz_amount));
	vec2 right_bound_intersect2 = center_screen_point + (screen_normal * 0.3);
	vec2 left_bound_intersect2 = center_screen_point - (screen_normal * 0.3);
	
	vec2 vert_moved = ((VERTEX + 1.0) / 2.0).xy;	
	
	float gradient = line_direction_onscreen.y / line_direction_onscreen.x;
	
	float acceptable_x1 = ((vert_moved.y - right_bound_intersect.y) / gradient) + right_bound_intersect.x;
	float acceptable_x2 = ((vert_moved.y - left_bound_intersect.y) / gradient) + left_bound_intersect.x;
	float acceptable_x1_2 = ((vert_moved.y - right_bound_intersect2.y) / gradient) + right_bound_intersect2.x;
	float acceptable_x2_2 = ((vert_moved.y - left_bound_intersect2.y) / gradient) + left_bound_intersect2.x;
	
	right_boundary = acceptable_x1 * VIEWPORT_SIZE.x;
	left_boundary = acceptable_x2 * VIEWPORT_SIZE.x;
	right_boundary2 = acceptable_x1_2 * VIEWPORT_SIZE.x;
	left_boundary2 = acceptable_x2_2 * VIEWPORT_SIZE.x;
	
	PROJECTION_MATRIX = mat4(1.0);
}"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/local_direction = Vector3( 0, -0.5, 0 )
shader_param/color = Color( 0, 0, 1, 1 )
shader_param/outline_color = Color( 0, 0, 0, 1 )
shader_param/line_width = 0.5
shader_param/pixel_size = 1.0
shader_param/fuzz_amount = 0.0
